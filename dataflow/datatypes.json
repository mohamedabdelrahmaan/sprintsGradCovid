{
	"name": "datatypes",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "covidstage",
						"type": "DatasetReference"
					},
					"name": "source1"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "destinationCovidDatasetsql",
						"type": "DatasetReference"
					},
					"name": "sink1",
					"rejectedDataLinkedService": {
						"referenceName": "AzureBlobStorage1",
						"type": "LinkedServiceReference"
					}
				}
			],
			"transformations": [
				{
					"name": "select1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          Country as string,",
				"          TotalCases as double,",
				"          NewCases as double,",
				"          TotalDeaths as double,",
				"          NewDeaths as double,",
				"          TotalRecovered as double,",
				"          ActiveCases as double,",
				"          SeriousCritical as double,",
				"          {Tot Cases/1M pop} as double,",
				"          {Deaths/1M pop} as double,",
				"          TotalTests as double,",
				"          {Tests/1M pop} as double,",
				"          {CASES per Test} as integer,",
				"          {Death in Closed Cases} as string,",
				"          {Rank by Testing rate} as short,",
				"          {Rank by Death rate} as short,",
				"          {Rank by Cases rate} as short,",
				"          {Rank by Death of Closed Cases} as short",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source1",
				"source1 select(mapColumn(",
				"          Country,",
				"          TotalCases,",
				"          NewCases,",
				"          TotalDeaths,",
				"          NewDeaths,",
				"          TotalRecovered,",
				"          ActiveCases,",
				"          SeriousCritical,",
				"          {Tot Cases/1M pop},",
				"          {Deaths/1M pop},",
				"          TotalTests,",
				"          {Tests/1M pop},",
				"          {CASES per Test},",
				"          {Death in Closed Cases},",
				"          {Rank by Testing rate},",
				"          {Rank by Death rate},",
				"          {Rank by Cases rate},",
				"          {Rank by Death of Closed Cases}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"select1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          Country as string,",
				"          TotalCases as decimal(10,4),",
				"          NewCases as decimal(10,4),",
				"          TotalDeaths as decimal(10,4),",
				"          NewDeaths as decimal(10,4),",
				"          TotalRecovered as decimal(10,4),",
				"          ActiveCases as decimal(10,4),",
				"          SeriousCritical as decimal(10,4),",
				"          TotCasesPer1Mpop as decimal(10,4),",
				"          DeathsPer1Mpop as decimal(10,4),",
				"          TotalTests as decimal(10,4),",
				"          TestsPer1Mpop as decimal(10,4),",
				"          CasesPerTest as decimal(10,4),",
				"          DeathInClosedCases as string,",
				"          RankByTestingRate as integer,",
				"          RankByDeathRate as integer,",
				"          RankByCasesRate as integer,",
				"          RankByDeathOfClosedCases as integer",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     saveOrder: 1,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          Country,",
				"          TotalCases,",
				"          NewCases,",
				"          TotalDeaths,",
				"          NewDeaths,",
				"          TotalRecovered,",
				"          ActiveCases,",
				"          SeriousCritical,",
				"          TotCasesPer1Mpop = {Tot Cases/1M pop},",
				"          DeathsPer1Mpop = {Deaths/1M pop},",
				"          TotalTests,",
				"          TestsPer1Mpop = {Tests/1M pop},",
				"          CasesPerTest = {CASES per Test},",
				"          DeathInClosedCases = {Death in Closed Cases},",
				"          RankByTestingRate = {Rank by Testing rate},",
				"          RankByDeathRate = {Rank by Death rate},",
				"          RankByCasesRate = {Rank by Cases rate},",
				"          RankByDeathOfClosedCases = {Rank by Death of Closed Cases}",
				"     )) ~> sink1"
			]
		}
	}
}